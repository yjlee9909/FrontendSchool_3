// 연습문제
let data = [{
    반 : 1, 
    번 : 1, 
    이름 : "호준", 
    중간고사점수 : 55
}, {
    반 : 1, 
    번 : 2, 
    이름 : "길동", 
    중간고사점수 : 60
}, {
    반 : 1, 
    번 : 3, 
    이름 : "영희", 
    중간고사점수 : 30
}, {
    반 : 1, 
    번 : 4, 
    이름 : "철수", 
    중간고사점수 : 20
}, {
    반 : 1, 
    번 : 5, 
    이름 : "규리", 
    중간고사점수 : 100
}]

// 중간고사 점수의 평균을 구하는 코드를 함수로 작성해주세요.

// 동현, 준근님 코드
function 평균값구하기(data){
    let sum = 0;
    for(student of data){
        sum += student["중간고사점수"]
    }
    return sum / data.length
}

function 평균값구하기(data) {
    let 중간고사점수 = data.map((x) => x.중간고사점수)
    let 중간고사점수합 = 중간고사점수.reduce((a, b) => a + b)
    return 중간고사점수합 / data.length
}

function 평균값구하기(data) {
    return data.map((x) => x.중간고사점수).reduce((a, b) => a + b) / data.length
}

console.log(function () {
    return data.map((x) => x.중간고사점수).reduce((a, b) => a + b) / data.length
}());

let a = (data) => data.map((x) => x.중간고사점수).reduce((a, b) => a + b) / data.length
console.log(a(data));

let b = (data) => { return data.map((x) => x.중간고사점수).reduce((a, b) => a + b) / data.length }
console.log(b(data));

// 5.8 call by value, reference, sharing
// 자바스크립트는 call by value만 존재함
// call by value -> 값의 전달
// call by reference -> 참조-주소값의 전달

// !!!! array와 같은 convension 자료형을 넘길 때에는 함수 안에서 값의 수정이 됩니다!!!!


let test = [10, 20, 30];
function 함수(a) {
    a[0] = 1000; // 함수 내부에서 변경 가능? 됨 array 자료형은 함수 안에서 값의 수정이 가능
}
함수(test);

// call by value
let test = 100;
function 함수(a) {
    a = 1000; // 함수 내부에서 변경 가능? 안됨
}
함수(test);

// 면접질문 : 자바스크립트는 call by value만 있습니다. 
// call by reference 처럼 보이지만 주소가 넘어가는 것이 아니라 주소가 복사가 되어 넘어감)

// 반례
var a = {};
function test(b) {
    b = 1000;
}

test(a)
a // {} 로 나오기떄문에 call by reference가 될 수 없다.
// 다르 언어에서는 a가 1000이 됨...
// 아래와 같은 특징 때문에 js에서는 call by sharing이라 얘기합니다
/*
원시값보다 덩치가 큰 배열이나 객체도 인자로써 옮겨질 때 값이 복제되어 전달되면

4. 유윤우 — 오늘 오후 3:29
지금 말씀하시는 부분이 원시값은 메모리에 값을 저장하고
object는 메모리에 참조주소를 저장해서 생기는 일 맞을까요?

4. 김태수 — 오늘 오후 3:29
실행시간이 길어질 수 도 있을까요?

4. 이준근 — 오늘 오후 3:30
함수 내부에서는 인자의 값을 가상 변수에 복제해서 로직을 수행하는데 참조값은 가상 변수에 주소값이 함께 담겨져서 값이 바뀌는 걸까요?

4. 이정호 — 오늘 오후 3:31
메모리 주소를 복사해서 넘기기 때문에 새로운 주소가 할당된 경우에만 변경이 안된다는 거라고 이해해도 될까요?
*/

// ### 5.8 !!!!클로저(Closure)!!!!!!!!!!!!!!!!

// 아래 예제에서는 add5, add10이 클로저입니다. **폐쇠된 공간 안에 데이터에 접근하기 위한 테크닉**입니다.

// - 폐쇠된 공간 안에 데이터에 접근하기 위한 테크닉
// - 내부 함수의 외부 함수 접근(권한) 테크닉

// 그러면 왜 사용할까요? **변수 은닉**과 **메모리 효율**, **코드 효율(또는 완전성)을 극대화**하기 위해 사용합니다.

function 제곱(x) {
    function 승수(y) {
        return y ** x;
    }
    return 승수; //이름을 리턴!!!! 승수()가 아님
}

let 제곱2 = 제곱(2); // y의 2승값을 가짐
제곱2(3) // 9
제곱2(10) // 100

function 제곱(x) {
    function 승수(y) {
        return y ** x; // x가 바깥의 x값을 참조
    }
    return 승수; //이름을 리턴!!!! 승수()가 아님
}

console.log(제곱(2)(3)); // 9 -> 제곱(2)=승수 -> 승수(3)을 가짐
///////////
function makeAdder(x) {
    var y = 1;
    return function(z) {
        y = 100;
        return x + y + z;
    };
}

var add5 = makeAdder(5); // z는 값이 아직 없음 할당 받기 전임 -> 
/*
    return function(z) {
        y = 100;
        return 5 + 100 + z;
    };
*/
var add10 = makeAdder(10);
//클로저에 x와 y의 환경이 저장됨

console.log(add5(2));  // 107 (x:5 + y:100 + z:2)
console.log(add10(2)); // 112 (x:10 + y:100 + z:2)
//함수 실행 시 클로저에 저장된 x, y값에 접근하여 값을 계산
//지역스코프에서 값을 찾고, 없으면 그 밖에 있는 스코프에서 찾고, 계속해서 찾아 올라가 전역 스코프까지 찾아보는 것을 스코프체이닝
//어려운 얘기로는 내부 렉시컬 환경에서 찾고 없으면 전역 렉시컬 환경에서 찾는다 얘기함.
//함수가 수행된 이후에도 상위함수의 렉시컬 환경에 접근 가능

// 사용하는 이유? -> 정보의 은닉을 위해서 -> 다른 코드들이 이 코드를 만지지 못하게 해야함

// 질문내용 깃허브 보고 정리하기

/*
call by value
아규먼트에 값이 넘어올 때 복사한 값이 넘어온다!
call by reference
아규먼트에 값이 넘어올 때 주소값이 넘어온다! (주소값이 넘어왔으니 접근을 하면 원본이다!)
- javascript는 참조값을 넘길 때 참조한 주소값을 '복사'하여 넘깁니다. 그래서 call by reference가 아니라 call by value입니다. '복사한 값'인거죠. 주소값도 값이니까요.
4. 김태수
원시값보다 덩치가 큰 배열이나 객체도 인자로써 옮겨질 때 값이 복제되어 전달되면 실행시간이 길어질 수 도 있을까요?
답 : 주소값을 복사하니 실행시간이 길어지지 않습니다.
4. 서동현 — 오늘 오후 3:28
변수가 가리키고 있는 공간에 저장된 '값'이 전달된다...?
답 : 주소값이 복사됩니다.
4. 유윤우 — 오늘 오후 3:29
지금 말씀하시는 부분이 원시값은 메모리에 값을 저장하고
object는 메모리에 참조주소를 저장해서 생기는 일 맞을까요?
답 : 이해하신 것이 맞습니다. 다만 이렇게 표현하는 것이 정확할 것 같아요. 원시값은 파라미터에 복사한 값을 저장하고 참조타입은 파라미터에 참조 주소를 복사하여 저장합니다.
4. 이준근 — 오늘 오후 3:30
함수 내부에서는 인자의 값을 가상 변수에 복제해서 로직을 수행하는데 참조값은 가상 변수에 주소값이 함께 담겨져서 값이 바뀌는 걸까요?
답 : 맞습니다. 주소값이 담겨져서 바뀌는 것입니다. 다만 주소값이 '복사'된 상태입니다.
4. 이정호 — 오늘 오후 3:31
메모리 주소를 복사해서 넘기기 때문에 새로운 주소가 할당된 경우에만 변경이 안된다는 거라고 이해해도 될까요?
답 : 정확합니다.
*/